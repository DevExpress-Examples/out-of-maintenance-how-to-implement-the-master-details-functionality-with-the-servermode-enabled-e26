'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.1
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Data
Imports System.Collections.Generic
Imports System.Reflection
Imports System.Linq
Imports System.Linq.Expressions
Imports System.ComponentModel
Imports System

Namespace WpfApplication15

    <Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="AdventureWorks")>
    Public Partial Class DataClasses1DataContext
        Inherits System.Data.Linq.DataContext

        Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New System.Data.Linq.Mapping.AttributeMappingSource()

'#Region "Extensibility Method Definitions"
        Partial Private Sub OnCreated()
        End Sub

        Partial Private Sub InsertProduct(ByVal instance As WpfApplication15.Product)
        End Sub

        Partial Private Sub UpdateProduct(ByVal instance As WpfApplication15.Product)
        End Sub

        Partial Private Sub DeleteProduct(ByVal instance As WpfApplication15.Product)
        End Sub

        Partial Private Sub InsertProductModel(ByVal instance As WpfApplication15.ProductModel)
        End Sub

        Partial Private Sub UpdateProductModel(ByVal instance As WpfApplication15.ProductModel)
        End Sub

        Partial Private Sub DeleteProductModel(ByVal instance As WpfApplication15.ProductModel)
        End Sub

'#End Region
        Public Sub New()
            MyBase.New(Global.WpfApplication15.Properties.Settings.[Default].AdventureWorksConnectionString, WpfApplication15.DataClasses1DataContext.mappingSource)
            Me.OnCreated()
        End Sub

        Public Sub New(ByVal connection As String)
            MyBase.New(connection, WpfApplication15.DataClasses1DataContext.mappingSource)
            Me.OnCreated()
        End Sub

        Public Sub New(ByVal connection As System.Data.IDbConnection)
            MyBase.New(connection, WpfApplication15.DataClasses1DataContext.mappingSource)
            Me.OnCreated()
        End Sub

        Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
            MyBase.New(connection, mappingSource)
            Me.OnCreated()
        End Sub

        Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
            MyBase.New(connection, mappingSource)
            Me.OnCreated()
        End Sub

        Public ReadOnly Property Products As System.Data.Linq.Table(Of WpfApplication15.Product)
            Get
                Return Me.GetTable(Of WpfApplication15.Product)()
            End Get
        End Property

        Public ReadOnly Property ProductModels As System.Data.Linq.Table(Of WpfApplication15.ProductModel)
            Get
                Return Me.GetTable(Of WpfApplication15.ProductModel)()
            End Get
        End Property
    End Class

    <Global.System.Data.Linq.Mapping.TableAttribute(Name:="Production.Product")>
    Public Partial Class Product
        Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

        Private Shared emptyChangingEventArgs As System.ComponentModel.PropertyChangingEventArgs = New System.ComponentModel.PropertyChangingEventArgs(System.[String].Empty)

        Private _ProductID As Integer

        Private _Name As String

        Private _ProductNumber As String

        Private _MakeFlag As Boolean

        Private _FinishedGoodsFlag As Boolean

        Private _Color As String

        Private _SafetyStockLevel As Short

        Private _ReorderPoint As Short

        Private _StandardCost As Decimal

        Private _ListPrice As Decimal

        Private _Size As String

        Private _SizeUnitMeasureCode As String

        Private _WeightUnitMeasureCode As String

        Private _Weight As System.Nullable(Of Decimal)

        Private _DaysToManufacture As Integer

        Private _ProductLine As String

        Private _Class As String

        Private _Style As String

        Private _ProductSubcategoryID As System.Nullable(Of Integer)

        Private _ProductModelID As System.Nullable(Of Integer)

        Private _SellStartDate As System.DateTime

        Private _SellEndDate As System.Nullable(Of System.DateTime)

        Private _DiscontinuedDate As System.Nullable(Of System.DateTime)

        Private _rowguid As System.Guid

        Private _ModifiedDate As System.DateTime

        Private _ProductModel As System.Data.Linq.EntityRef(Of WpfApplication15.ProductModel)

'#Region "Extensibility Method Definitions"
        Partial Private Sub OnLoaded()
        End Sub

        Partial Private Sub OnValidate(ByVal action As System.Data.Linq.ChangeAction)
        End Sub

        Partial Private Sub OnCreated()
        End Sub

        Partial Private Sub OnProductIDChanging(ByVal value As Integer)
        End Sub

        Partial Private Sub OnProductIDChanged()
        End Sub

        Partial Private Sub OnNameChanging(ByVal value As String)
        End Sub

        Partial Private Sub OnNameChanged()
        End Sub

        Partial Private Sub OnProductNumberChanging(ByVal value As String)
        End Sub

        Partial Private Sub OnProductNumberChanged()
        End Sub

        Partial Private Sub OnMakeFlagChanging(ByVal value As Boolean)
        End Sub

        Partial Private Sub OnMakeFlagChanged()
        End Sub

        Partial Private Sub OnFinishedGoodsFlagChanging(ByVal value As Boolean)
        End Sub

        Partial Private Sub OnFinishedGoodsFlagChanged()
        End Sub

        Partial Private Sub OnColorChanging(ByVal value As String)
        End Sub

        Partial Private Sub OnColorChanged()
        End Sub

        Partial Private Sub OnSafetyStockLevelChanging(ByVal value As Short)
        End Sub

        Partial Private Sub OnSafetyStockLevelChanged()
        End Sub

        Partial Private Sub OnReorderPointChanging(ByVal value As Short)
        End Sub

        Partial Private Sub OnReorderPointChanged()
        End Sub

        Partial Private Sub OnStandardCostChanging(ByVal value As Decimal)
        End Sub

        Partial Private Sub OnStandardCostChanged()
        End Sub

        Partial Private Sub OnListPriceChanging(ByVal value As Decimal)
        End Sub

        Partial Private Sub OnListPriceChanged()
        End Sub

        Partial Private Sub OnSizeChanging(ByVal value As String)
        End Sub

        Partial Private Sub OnSizeChanged()
        End Sub

        Partial Private Sub OnSizeUnitMeasureCodeChanging(ByVal value As String)
        End Sub

        Partial Private Sub OnSizeUnitMeasureCodeChanged()
        End Sub

        Partial Private Sub OnWeightUnitMeasureCodeChanging(ByVal value As String)
        End Sub

        Partial Private Sub OnWeightUnitMeasureCodeChanged()
        End Sub

        Partial Private Sub OnWeightChanging(ByVal value As System.Nullable(Of Decimal))
        End Sub

        Partial Private Sub OnWeightChanged()
        End Sub

        Partial Private Sub OnDaysToManufactureChanging(ByVal value As Integer)
        End Sub

        Partial Private Sub OnDaysToManufactureChanged()
        End Sub

        Partial Private Sub OnProductLineChanging(ByVal value As String)
        End Sub

        Partial Private Sub OnProductLineChanged()
        End Sub

        Partial Private Sub OnClassChanging(ByVal value As String)
        End Sub

        Partial Private Sub OnClassChanged()
        End Sub

        Partial Private Sub OnStyleChanging(ByVal value As String)
        End Sub

        Partial Private Sub OnStyleChanged()
        End Sub

        Partial Private Sub OnProductSubcategoryIDChanging(ByVal value As System.Nullable(Of Integer))
        End Sub

        Partial Private Sub OnProductSubcategoryIDChanged()
        End Sub

        Partial Private Sub OnProductModelIDChanging(ByVal value As System.Nullable(Of Integer))
        End Sub

        Partial Private Sub OnProductModelIDChanged()
        End Sub

        Partial Private Sub OnSellStartDateChanging(ByVal value As System.DateTime)
        End Sub

        Partial Private Sub OnSellStartDateChanged()
        End Sub

        Partial Private Sub OnSellEndDateChanging(ByVal value As System.Nullable(Of System.DateTime))
        End Sub

        Partial Private Sub OnSellEndDateChanged()
        End Sub

        Partial Private Sub OnDiscontinuedDateChanging(ByVal value As System.Nullable(Of System.DateTime))
        End Sub

        Partial Private Sub OnDiscontinuedDateChanged()
        End Sub

        Partial Private Sub OnrowguidChanging(ByVal value As System.Guid)
        End Sub

        Partial Private Sub OnrowguidChanged()
        End Sub

        Partial Private Sub OnModifiedDateChanging(ByVal value As System.DateTime)
        End Sub

        Partial Private Sub OnModifiedDateChanged()
        End Sub

'#End Region
        Public Sub New()
            Me._ProductModel = DirectCast(Nothing, Global.System.Data.Linq.EntityRef(Of Global.WpfApplication15.ProductModel))
            Me.OnCreated()
        End Sub

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductID", AutoSync:=System.Data.Linq.Mapping.AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=True, IsDbGenerated:=True)>
        Public Property ProductID As Integer
            Get
                Return Me._ProductID
            End Get

            Set(ByVal value As Integer)
                If(Me._ProductID <> value) Then
                    Me.OnProductIDChanging(value)
                    Me.SendPropertyChanging()
                    Me._ProductID = value
                    Me.SendPropertyChanged("ProductID")
                    Me.OnProductIDChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(50) NOT NULL", CanBeNull:=False)>
        Public Property Name As String
            Get
                Return Me._Name
            End Get

            Set(ByVal value As String)
                If(Not Equals(Me._Name, value)) Then
                    Me.OnNameChanging(value)
                    Me.SendPropertyChanging()
                    Me._Name = value
                    Me.SendPropertyChanged("Name")
                    Me.OnNameChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductNumber", DbType:="NVarChar(25) NOT NULL", CanBeNull:=False)>
        Public Property ProductNumber As String
            Get
                Return Me._ProductNumber
            End Get

            Set(ByVal value As String)
                If(Not Equals(Me._ProductNumber, value)) Then
                    Me.OnProductNumberChanging(value)
                    Me.SendPropertyChanging()
                    Me._ProductNumber = value
                    Me.SendPropertyChanged("ProductNumber")
                    Me.OnProductNumberChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MakeFlag", DbType:="Bit NOT NULL")>
        Public Property MakeFlag As Boolean
            Get
                Return Me._MakeFlag
            End Get

            Set(ByVal value As Boolean)
                If(Me._MakeFlag <> value) Then
                    Me.OnMakeFlagChanging(value)
                    Me.SendPropertyChanging()
                    Me._MakeFlag = value
                    Me.SendPropertyChanged("MakeFlag")
                    Me.OnMakeFlagChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FinishedGoodsFlag", DbType:="Bit NOT NULL")>
        Public Property FinishedGoodsFlag As Boolean
            Get
                Return Me._FinishedGoodsFlag
            End Get

            Set(ByVal value As Boolean)
                If(Me._FinishedGoodsFlag <> value) Then
                    Me.OnFinishedGoodsFlagChanging(value)
                    Me.SendPropertyChanging()
                    Me._FinishedGoodsFlag = value
                    Me.SendPropertyChanged("FinishedGoodsFlag")
                    Me.OnFinishedGoodsFlagChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Color", DbType:="NVarChar(15)")>
        Public Property Color As String
            Get
                Return Me._Color
            End Get

            Set(ByVal value As String)
                If(Not Equals(Me._Color, value)) Then
                    Me.OnColorChanging(value)
                    Me.SendPropertyChanging()
                    Me._Color = value
                    Me.SendPropertyChanged("Color")
                    Me.OnColorChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SafetyStockLevel", DbType:="SmallInt NOT NULL")>
        Public Property SafetyStockLevel As Short
            Get
                Return Me._SafetyStockLevel
            End Get

            Set(ByVal value As Short)
                If(Me._SafetyStockLevel <> value) Then
                    Me.OnSafetyStockLevelChanging(value)
                    Me.SendPropertyChanging()
                    Me._SafetyStockLevel = value
                    Me.SendPropertyChanged("SafetyStockLevel")
                    Me.OnSafetyStockLevelChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ReorderPoint", DbType:="SmallInt NOT NULL")>
        Public Property ReorderPoint As Short
            Get
                Return Me._ReorderPoint
            End Get

            Set(ByVal value As Short)
                If(Me._ReorderPoint <> value) Then
                    Me.OnReorderPointChanging(value)
                    Me.SendPropertyChanging()
                    Me._ReorderPoint = value
                    Me.SendPropertyChanged("ReorderPoint")
                    Me.OnReorderPointChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StandardCost", DbType:="Money NOT NULL")>
        Public Property StandardCost As Decimal
            Get
                Return Me._StandardCost
            End Get

            Set(ByVal value As Decimal)
                If(Me._StandardCost <> value) Then
                    Me.OnStandardCostChanging(value)
                    Me.SendPropertyChanging()
                    Me._StandardCost = value
                    Me.SendPropertyChanged("StandardCost")
                    Me.OnStandardCostChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ListPrice", DbType:="Money NOT NULL")>
        Public Property ListPrice As Decimal
            Get
                Return Me._ListPrice
            End Get

            Set(ByVal value As Decimal)
                If(Me._ListPrice <> value) Then
                    Me.OnListPriceChanging(value)
                    Me.SendPropertyChanging()
                    Me._ListPrice = value
                    Me.SendPropertyChanged("ListPrice")
                    Me.OnListPriceChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Size", DbType:="NVarChar(5)")>
        Public Property Size As String
            Get
                Return Me._Size
            End Get

            Set(ByVal value As String)
                If(Not Equals(Me._Size, value)) Then
                    Me.OnSizeChanging(value)
                    Me.SendPropertyChanging()
                    Me._Size = value
                    Me.SendPropertyChanged("Size")
                    Me.OnSizeChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SizeUnitMeasureCode", DbType:="NChar(3)")>
        Public Property SizeUnitMeasureCode As String
            Get
                Return Me._SizeUnitMeasureCode
            End Get

            Set(ByVal value As String)
                If(Not Equals(Me._SizeUnitMeasureCode, value)) Then
                    Me.OnSizeUnitMeasureCodeChanging(value)
                    Me.SendPropertyChanging()
                    Me._SizeUnitMeasureCode = value
                    Me.SendPropertyChanged("SizeUnitMeasureCode")
                    Me.OnSizeUnitMeasureCodeChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WeightUnitMeasureCode", DbType:="NChar(3)")>
        Public Property WeightUnitMeasureCode As String
            Get
                Return Me._WeightUnitMeasureCode
            End Get

            Set(ByVal value As String)
                If(Not Equals(Me._WeightUnitMeasureCode, value)) Then
                    Me.OnWeightUnitMeasureCodeChanging(value)
                    Me.SendPropertyChanging()
                    Me._WeightUnitMeasureCode = value
                    Me.SendPropertyChanged("WeightUnitMeasureCode")
                    Me.OnWeightUnitMeasureCodeChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Weight", DbType:="Decimal(8,2)")>
        Public Property Weight As System.Nullable(Of Decimal)
            Get
                Return Me._Weight
            End Get

            Set(ByVal value As System.Nullable(Of Decimal))
                If(Me._Weight <> value) Then
                    Me.OnWeightChanging(value)
                    Me.SendPropertyChanging()
                    Me._Weight = value
                    Me.SendPropertyChanged("Weight")
                    Me.OnWeightChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DaysToManufacture", DbType:="Int NOT NULL")>
        Public Property DaysToManufacture As Integer
            Get
                Return Me._DaysToManufacture
            End Get

            Set(ByVal value As Integer)
                If(Me._DaysToManufacture <> value) Then
                    Me.OnDaysToManufactureChanging(value)
                    Me.SendPropertyChanging()
                    Me._DaysToManufacture = value
                    Me.SendPropertyChanged("DaysToManufacture")
                    Me.OnDaysToManufactureChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductLine", DbType:="NChar(2)")>
        Public Property ProductLine As String
            Get
                Return Me._ProductLine
            End Get

            Set(ByVal value As String)
                If(Not Equals(Me._ProductLine, value)) Then
                    Me.OnProductLineChanging(value)
                    Me.SendPropertyChanging()
                    Me._ProductLine = value
                    Me.SendPropertyChanged("ProductLine")
                    Me.OnProductLineChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Class", DbType:="NChar(2)")>
        Public Property [Class] As String
            Get
                Return Me._Class
            End Get

            Set(ByVal value As String)
                If(Not Equals(Me._Class, value)) Then
                    Me.OnClassChanging(value)
                    Me.SendPropertyChanging()
                    Me._Class = value
                    Me.SendPropertyChanged("Class")
                    Me.OnClassChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Style", DbType:="NChar(2)")>
        Public Property Style As String
            Get
                Return Me._Style
            End Get

            Set(ByVal value As String)
                If(Not Equals(Me._Style, value)) Then
                    Me.OnStyleChanging(value)
                    Me.SendPropertyChanging()
                    Me._Style = value
                    Me.SendPropertyChanged("Style")
                    Me.OnStyleChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductSubcategoryID", DbType:="Int")>
        Public Property ProductSubcategoryID As System.Nullable(Of Integer)
            Get
                Return Me._ProductSubcategoryID
            End Get

            Set(ByVal value As System.Nullable(Of Integer))
                If(Me._ProductSubcategoryID <> value) Then
                    Me.OnProductSubcategoryIDChanging(value)
                    Me.SendPropertyChanging()
                    Me._ProductSubcategoryID = value
                    Me.SendPropertyChanged("ProductSubcategoryID")
                    Me.OnProductSubcategoryIDChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductModelID", DbType:="Int")>
        Public Property ProductModelID As System.Nullable(Of Integer)
            Get
                Return Me._ProductModelID
            End Get

            Set(ByVal value As System.Nullable(Of Integer))
                If(Me._ProductModelID <> value) Then
                    If Me._ProductModel.HasLoadedOrAssignedValue Then
                        Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
                    End If

                    Me.OnProductModelIDChanging(value)
                    Me.SendPropertyChanging()
                    Me._ProductModelID = value
                    Me.SendPropertyChanged("ProductModelID")
                    Me.OnProductModelIDChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SellStartDate", DbType:="DateTime NOT NULL")>
        Public Property SellStartDate As System.DateTime
            Get
                Return Me._SellStartDate
            End Get

            Set(ByVal value As System.DateTime)
                If(Me._SellStartDate <> value) Then
                    Me.OnSellStartDateChanging(value)
                    Me.SendPropertyChanging()
                    Me._SellStartDate = value
                    Me.SendPropertyChanged("SellStartDate")
                    Me.OnSellStartDateChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SellEndDate", DbType:="DateTime")>
        Public Property SellEndDate As System.Nullable(Of System.DateTime)
            Get
                Return Me._SellEndDate
            End Get

            Set(ByVal value As System.Nullable(Of System.DateTime))
                If(Me._SellEndDate <> value) Then
                    Me.OnSellEndDateChanging(value)
                    Me.SendPropertyChanging()
                    Me._SellEndDate = value
                    Me.SendPropertyChanged("SellEndDate")
                    Me.OnSellEndDateChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DiscontinuedDate", DbType:="DateTime")>
        Public Property DiscontinuedDate As System.Nullable(Of System.DateTime)
            Get
                Return Me._DiscontinuedDate
            End Get

            Set(ByVal value As System.Nullable(Of System.DateTime))
                If(Me._DiscontinuedDate <> value) Then
                    Me.OnDiscontinuedDateChanging(value)
                    Me.SendPropertyChanging()
                    Me._DiscontinuedDate = value
                    Me.SendPropertyChanged("DiscontinuedDate")
                    Me.OnDiscontinuedDateChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rowguid", DbType:="UniqueIdentifier NOT NULL")>
        Public Property rowguid As System.Guid
            Get
                Return Me._rowguid
            End Get

            Set(ByVal value As System.Guid)
                If(Me._rowguid <> value) Then
                    Me.OnrowguidChanging(value)
                    Me.SendPropertyChanging()
                    Me._rowguid = value
                    Me.SendPropertyChanged("rowguid")
                    Me.OnrowguidChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifiedDate", DbType:="DateTime NOT NULL")>
        Public Property ModifiedDate As System.DateTime
            Get
                Return Me._ModifiedDate
            End Get

            Set(ByVal value As System.DateTime)
                If(Me._ModifiedDate <> value) Then
                    Me.OnModifiedDateChanging(value)
                    Me.SendPropertyChanging()
                    Me._ModifiedDate = value
                    Me.SendPropertyChanged("ModifiedDate")
                    Me.OnModifiedDateChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ProductModel_Product", Storage:="_ProductModel", ThisKey:="ProductModelID", OtherKey:="ProductModelID", IsForeignKey:=True)>
        Public Property ProductModel As ProductModel
            Get
                Return Me._ProductModel.Entity
            End Get

            Set(ByVal value As ProductModel)
                Dim previousValue As WpfApplication15.ProductModel = Me._ProductModel.Entity
                If((previousValue IsNot value) OrElse (Me._ProductModel.HasLoadedOrAssignedValue = False)) Then
                    Me.SendPropertyChanging()
                    If(previousValue IsNot Nothing) Then
                        Me._ProductModel.Entity = Nothing
                        previousValue.Products.Remove(Me)
                    End If

                    Me._ProductModel.Entity = value
                    If(value IsNot Nothing) Then
                        value.Products.Add(Me)
                        Me._ProductModelID = value.ProductModelID
                    Else
                        Me._ProductModelID = DirectCast(Nothing, System.Int32?)
                    End If

                    Me.SendPropertyChanged("ProductModel")
                End If
            End Set
        End Property

        Public Event PropertyChanging As System.ComponentModel.PropertyChangingEventHandler Implements Global.System.ComponentModel.INotifyPropertyChanging.PropertyChanging

        Public Event PropertyChanged As System.ComponentModel.PropertyChangedEventHandler Implements Global.System.ComponentModel.INotifyPropertyChanged.PropertyChanged

        Protected Overridable Sub SendPropertyChanging()
            RaiseEvent PropertyChanging(Me, WpfApplication15.Product.emptyChangingEventArgs)
        End Sub

        Protected Overridable Sub SendPropertyChanged(ByVal propertyName As System.[String])
            RaiseEvent PropertyChanged(Me, New System.ComponentModel.PropertyChangedEventArgs(propertyName))
        End Sub
    End Class

    <Global.System.Data.Linq.Mapping.TableAttribute(Name:="Production.ProductModel")>
    Public Partial Class ProductModel
        Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

        Private Shared emptyChangingEventArgs As System.ComponentModel.PropertyChangingEventArgs = New System.ComponentModel.PropertyChangingEventArgs(System.[String].Empty)

        Private _ProductModelID As Integer

        Private _Name As String

        Private _CatalogDescription As System.Xml.Linq.XElement

        Private _Instructions As System.Xml.Linq.XElement

        Private _rowguid As System.Guid

        Private _ModifiedDate As System.DateTime

        Private _Products As System.Data.Linq.EntitySet(Of WpfApplication15.Product)

'#Region "Extensibility Method Definitions"
        Partial Private Sub OnLoaded()
        End Sub

        Partial Private Sub OnValidate(ByVal action As System.Data.Linq.ChangeAction)
        End Sub

        Partial Private Sub OnCreated()
        End Sub

        Partial Private Sub OnProductModelIDChanging(ByVal value As Integer)
        End Sub

        Partial Private Sub OnProductModelIDChanged()
        End Sub

        Partial Private Sub OnNameChanging(ByVal value As String)
        End Sub

        Partial Private Sub OnNameChanged()
        End Sub

        Partial Private Sub OnCatalogDescriptionChanging(ByVal value As System.Xml.Linq.XElement)
        End Sub

        Partial Private Sub OnCatalogDescriptionChanged()
        End Sub

        Partial Private Sub OnInstructionsChanging(ByVal value As System.Xml.Linq.XElement)
        End Sub

        Partial Private Sub OnInstructionsChanged()
        End Sub

        Partial Private Sub OnrowguidChanging(ByVal value As System.Guid)
        End Sub

        Partial Private Sub OnrowguidChanged()
        End Sub

        Partial Private Sub OnModifiedDateChanging(ByVal value As System.DateTime)
        End Sub

        Partial Private Sub OnModifiedDateChanged()
        End Sub

'#End Region
        Public Sub New()
            Me._Products = New System.Data.Linq.EntitySet(Of WpfApplication15.Product)(New System.Action(Of WpfApplication15.Product)(AddressOf Me.attach_Products), New System.Action(Of WpfApplication15.Product)(AddressOf Me.detach_Products))
            Me.OnCreated()
        End Sub

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductModelID", AutoSync:=System.Data.Linq.Mapping.AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=True, IsDbGenerated:=True)>
        Public Property ProductModelID As Integer
            Get
                Return Me._ProductModelID
            End Get

            Set(ByVal value As Integer)
                If(Me._ProductModelID <> value) Then
                    Me.OnProductModelIDChanging(value)
                    Me.SendPropertyChanging()
                    Me._ProductModelID = value
                    Me.SendPropertyChanged("ProductModelID")
                    Me.OnProductModelIDChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(50) NOT NULL", CanBeNull:=False)>
        Public Property Name As String
            Get
                Return Me._Name
            End Get

            Set(ByVal value As String)
                If(Not Equals(Me._Name, value)) Then
                    Me.OnNameChanging(value)
                    Me.SendPropertyChanging()
                    Me._Name = value
                    Me.SendPropertyChanged("Name")
                    Me.OnNameChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CatalogDescription", DbType:="Xml", UpdateCheck:=System.Data.Linq.Mapping.UpdateCheck.Never)>
        Public Property CatalogDescription As System.Xml.Linq.XElement
            Get
                Return Me._CatalogDescription
            End Get

            Set(ByVal value As System.Xml.Linq.XElement)
                If(Me._CatalogDescription IsNot value) Then
                    Me.OnCatalogDescriptionChanging(value)
                    Me.SendPropertyChanging()
                    Me._CatalogDescription = value
                    Me.SendPropertyChanged("CatalogDescription")
                    Me.OnCatalogDescriptionChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Instructions", DbType:="Xml", UpdateCheck:=System.Data.Linq.Mapping.UpdateCheck.Never)>
        Public Property Instructions As System.Xml.Linq.XElement
            Get
                Return Me._Instructions
            End Get

            Set(ByVal value As System.Xml.Linq.XElement)
                If(Me._Instructions IsNot value) Then
                    Me.OnInstructionsChanging(value)
                    Me.SendPropertyChanging()
                    Me._Instructions = value
                    Me.SendPropertyChanged("Instructions")
                    Me.OnInstructionsChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rowguid", DbType:="UniqueIdentifier NOT NULL")>
        Public Property rowguid As System.Guid
            Get
                Return Me._rowguid
            End Get

            Set(ByVal value As System.Guid)
                If(Me._rowguid <> value) Then
                    Me.OnrowguidChanging(value)
                    Me.SendPropertyChanging()
                    Me._rowguid = value
                    Me.SendPropertyChanged("rowguid")
                    Me.OnrowguidChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifiedDate", DbType:="DateTime NOT NULL")>
        Public Property ModifiedDate As System.DateTime
            Get
                Return Me._ModifiedDate
            End Get

            Set(ByVal value As System.DateTime)
                If(Me._ModifiedDate <> value) Then
                    Me.OnModifiedDateChanging(value)
                    Me.SendPropertyChanging()
                    Me._ModifiedDate = value
                    Me.SendPropertyChanged("ModifiedDate")
                    Me.OnModifiedDateChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ProductModel_Product", Storage:="_Products", ThisKey:="ProductModelID", OtherKey:="ProductModelID")>
        Public Property Products As EntitySet(Of WpfApplication15.Product)
            Get
                Return Me._Products
            End Get

            Set(ByVal value As EntitySet(Of WpfApplication15.Product))
                Me._Products.Assign(value)
            End Set
        End Property

        Public Event PropertyChanging As System.ComponentModel.PropertyChangingEventHandler Implements Global.System.ComponentModel.INotifyPropertyChanging.PropertyChanging

        Public Event PropertyChanged As System.ComponentModel.PropertyChangedEventHandler Implements Global.System.ComponentModel.INotifyPropertyChanged.PropertyChanged

        Protected Overridable Sub SendPropertyChanging()
            RaiseEvent PropertyChanging(Me, WpfApplication15.ProductModel.emptyChangingEventArgs)
        End Sub

        Protected Overridable Sub SendPropertyChanged(ByVal propertyName As System.[String])
            RaiseEvent PropertyChanged(Me, New System.ComponentModel.PropertyChangedEventArgs(propertyName))
        End Sub

        Private Sub attach_Products(ByVal entity As WpfApplication15.Product)
            Me.SendPropertyChanging()
            entity.ProductModel = Me
        End Sub

        Private Sub detach_Products(ByVal entity As WpfApplication15.Product)
            Me.SendPropertyChanging()
            entity.ProductModel = Nothing
        End Sub
    End Class
End Namespace
